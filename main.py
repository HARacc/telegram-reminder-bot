import json
import os
import asyncio
import logging
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from dotenv import load_dotenv
import nest_asyncio

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–≤ ---
logging.basicConfig(level=logging.INFO)
print("‚è≥ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

# --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ ---
load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
REMINDER_FILE = "reminders.json"

# --- –ó—á–∏—Ç—É–≤–∞–Ω–Ω—è/–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å ---
def load_reminders():
    if os.path.exists(REMINDER_FILE):
        with open(REMINDER_FILE, "r") as f:
            return json.load(f)
    return []

def save_reminders(reminders):
    with open(REMINDER_FILE, "w") as f:
        json.dump(reminders, f, indent=2)

# --- –ö–æ–º–∞–Ω–¥–∞ /remind ---
async def remind_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        time_str = context.args[0]
        message = " ".join(context.args[1:])

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É —á–∞—Å—É
        try:
            hour, minute = map(int, time_str.split(":"))
            if not (0 <= hour < 24 and 0 <= minute < 60):
                raise ValueError
        except Exception:
            await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 14:30)")
            return

        reminders = load_reminders()
        reminders.append({
            "chat_id": update.effective_chat.id,
            "time": time_str,
            "text": message,
            "sent": False,
            "daily": False
        })
        save_reminders(reminders)
        await update.message.reply_text(f"‚úÖ –û–¥–Ω–æ—Ä–∞–∑–æ–≤–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–∞ {time_str}: {message}")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —É /remind: {e}")
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /remind 14:00 —Ç–µ–∫—Å—Ç")

# --- –ö–æ–º–∞–Ω–¥–∞ /remind_daily ---
async def remind_daily_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        time_str = context.args[0]
        message = " ".join(context.args[1:])

        try:
            hour, minute = map(int, time_str.split(":"))
            if not (0 <= hour < 24 and 0 <= minute < 60):
                raise ValueError
        except Exception:
            await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 08:15)")
            return

        reminders = load_reminders()
        reminders.append({
            "chat_id": update.effective_chat.id,
            "time": time_str,
            "text": message,
            "daily": True
        })
        save_reminders(reminders)
        await update.message.reply_text(f"‚úÖ –©–æ–¥–µ–Ω–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–∞ {time_str}: {message}")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —É /remind_daily: {e}")
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /remind_daily 08:15 —Ç–µ–∫—Å—Ç")

# --- –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–∏—Ö ---
async def remind_remove_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reminders = load_reminders()
    reminders = [r for r in reminders if not r.get("daily", False)]
    save_reminders(reminders)
    await update.message.reply_text("üóëÔ∏è –£—Å—ñ —â–æ–¥–µ–Ω–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ.")

# --- –§–æ–Ω–æ–≤–∏–π —Ü–∏–∫–ª ---
async def reminder_loop(app):
    logging.info("üì° –§–æ–Ω–æ–≤–∏–π –ø—Ä–æ—Ü–µ—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –∑–∞–ø—É—â–µ–Ω–æ")
    while True:
        now = (datetime.now() + timedelta(hours=3)).strftime("%H:%M")
        reminders = load_reminders()
        changed = False
        for reminder in reminders:
            if reminder["time"] == now:
                if reminder.get("daily", False):
                    await app.bot.send_message(chat_id=reminder["chat_id"], text=f"üìÖ –©–æ–¥–µ–Ω–Ω–µ: {reminder['text']}")
                    changed = True
                elif not reminder.get("sent", False):
                    await app.bot.send_message(chat_id=reminder["chat_id"], text=f"‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {reminder['text']}")
                    reminder["sent"] = True
                    changed = True
        if changed:
            save_reminders(reminders)
        await asyncio.sleep(60)

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    logging.info("üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞...")
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("remind", remind_command))
    app.add_handler(CommandHandler("remind_daily", remind_daily_command))
    app.add_handler(CommandHandler("remind_remove_all", remind_remove_all))

    await app.initialize()
    await app.start()
    asyncio.create_task(reminder_loop(app))
    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥...")
    await app.updater.start_polling()

# --- Nest_asyncio –∑–∞–ø—É—Å–∫ ---
nest_asyncio.apply()
loop = asyncio.get_event_loop()
loop.create_task(main())
loop.run_forever()
