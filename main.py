import json
import os
import asyncio
import logging
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from dotenv import load_dotenv
import nest_asyncio
import requests

logging.basicConfig(level=logging.INFO)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö
load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
SERVER_URL = os.getenv("SERVER_URL") 
REMINDER_FILE = "reminders.json"

# –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
def load_reminders():
    if os.path.exists(REMINDER_FILE):
        with open(REMINDER_FILE, "r") as f:
            return json.load(f)
    return []

def save_reminders(reminders):
    with open(REMINDER_FILE, "w") as f:
        json.dump(reminders, f, indent=2)

async def remind_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        time_str = context.args[0]
        message = " ".join(context.args[1:])
        hour, minute = map(int, time_str.split(":"))
        reminders = load_reminders()
        reminders.append({
            "chat_id": update.effective_chat.id,
            "time": time_str,
            "text": message,
            "sent": False,
            "daily": False
        })
        save_reminders(reminders)
        await update.message.reply_text(f"‚úÖ –û–¥–Ω–æ—Ä–∞–∑–æ–≤–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–∞ {time_str}: {message}")
    except:
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /remind 14:00 —Ç–µ–∫—Å—Ç")

async def remind_daily_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        time_str = context.args[0]
        message = " ".join(context.args[1:])
        hour, minute = map(int, time_str.split(":"))
        reminders = load_reminders()
        reminders.append({
            "chat_id": update.effective_chat.id,
            "time": time_str,
            "text": message,
            "daily": True
        })
        save_reminders(reminders)
        await update.message.reply_text(f"‚úÖ –©–æ–¥–µ–Ω–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–∞ {time_str}: {message}")
    except:
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /remind_daily 08:00 —Ç–µ–∫—Å—Ç")

async def remind_remove_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reminders = load_reminders()
    reminders = [r for r in reminders if not r.get("daily", False)]
    save_reminders(reminders)
    await update.message.reply_text("üóëÔ∏è –£—Å—ñ —â–æ–¥–µ–Ω–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ.")

async def threshold_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not context.args:
            await update.message.reply_text("‚ùå –í–∫–∞–∂–∏ –ø–æ—Ä—ñ–≥. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: /threshold 0.3")
            return
        value = float(context.args[0])
        response = requests.post(f"{SERVER_URL}/update_threshold", json={"threshold": value})
        if response.status_code == 200:
            await update.message.reply_text(f"‚úÖ –ü–æ—Ä—ñ–≥ –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–æ {value:.3f}")
        else:
            await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {response.text}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# –§–æ–Ω–æ–≤–∏–π –ø—Ä–æ—Ü–µ—Å
async def reminder_loop(app):
    while True:
        now = (datetime.now() + timedelta(hours=3)).strftime("%H:%M")
        reminders = load_reminders()
        changed = False
        for reminder in reminders:
            if reminder["time"] == now:
                if reminder.get("daily", False):
                    await app.bot.send_message(chat_id=reminder["chat_id"], text=f"üìÖ –©–æ–¥–µ–Ω–Ω–µ: {reminder['text']}")
                    changed = True
                elif not reminder.get("sent", False):
                    await app.bot.send_message(chat_id=reminder["chat_id"], text=f"‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {reminder['text']}")
                    reminder["sent"] = True
                    changed = True
        if changed:
            save_reminders(reminders)
        await asyncio.sleep(60)

async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("remind", remind_command))
    app.add_handler(CommandHandler("remind_daily", remind_daily_command))
    app.add_handler(CommandHandler("remind_remove_all", remind_remove_all))
    app.add_handler(CommandHandler("threshold", threshold_command))
    await app.initialize()
    await app.start()
    asyncio.create_task(reminder_loop(app))
    await app.updater.start_polling()

nest_asyncio.apply()
loop = asyncio.get_event_loop()
loop.create_task(main())
loop.run_forever()
