import json
import os
import asyncio
import logging
from datetime import datetime
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from dotenv import load_dotenv
import nest_asyncio

logging.basicConfig(level=logging.INFO)
print("‚è≥ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
REMINDER_FILE = "reminders.json"

def load_reminders():
    if os.path.exists(REMINDER_FILE):
        with open(REMINDER_FILE, "r") as f:
            return json.load(f)
    return []

def save_reminders(reminders):
    with open(REMINDER_FILE, "w") as f:
        json.dump(reminders, f, indent=2)

async def remind_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        time_str = context.args[0]
        text = " ".join(context.args[1:])
        daily = False

        if "—â–æ–¥–Ω—è" in text.lower():
            text = text.replace("—â–æ–¥–Ω—è", "").strip()
            daily = True

        reminders = load_reminders()
        reminders.append({
            "chat_id": update.effective_chat.id,
            "time": time_str,
            "text": text,
            "sent": False,
            "daily": daily
        })
        save_reminders(reminders)

        repeat_note = " (—â–æ–¥–Ω—è)" if daily else ""
        await update.message.reply_text(f"‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time_str}{repeat_note}: {text}")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —É /remind: {e}")
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /remind 14:00 [—â–æ–¥–Ω—è] –≤–∏–ø–∏–π –ª—ñ–∫–∏")

async def cancelall_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    reminders = load_reminders()
    reminders = [r for r in reminders if not (r["chat_id"] == chat_id and r.get("daily", False))]
    save_reminders(reminders)
    await update.message.reply_text("üóëÔ∏è –í—Å—ñ —â–æ–¥–µ–Ω–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ.")

async def reminder_loop(app):
    logging.info("üì° –§–æ–Ω–æ–≤–∏–π –ø—Ä–æ—Ü–µ—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –∑–∞–ø—É—â–µ–Ω–æ")
    while True:
        now = datetime.now().strftime("%H:%M")
        reminders = load_reminders()
        for reminder in reminders:
            if reminder["time"] == now and (not reminder["sent"] or reminder.get("daily", False)):
                await app.bot.send_message(chat_id=reminder["chat_id"], text=f"‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {reminder['text']}")
                if not reminder.get("daily", False):
                    reminder["sent"] = True
        save_reminders(reminders)
        await asyncio.sleep(60)

async def main():
    logging.info("üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞...")
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("remind", remind_command))
    app.add_handler(CommandHandler("cancelall", cancelall_command))
    await app.initialize()
    await app.start()
    asyncio.create_task(reminder_loop(app))
    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥...")
    await app.updater.start_polling()

nest_asyncio.apply()
loop = asyncio.get_event_loop()
loop.create_task(main())
loop.run_forever()
