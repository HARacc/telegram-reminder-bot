import json
import os
import asyncio
import logging
from datetime import datetime
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from dotenv import load_dotenv
import nest_asyncio

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–≤ ---
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ ---
load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
REMINDER_FILE = "reminders.json"

# --- –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ---
def load_reminders():
    if os.path.exists(REMINDER_FILE):
        with open(REMINDER_FILE, "r") as f:
            try:
                return json.load(f)
            except json.JSONDecodeError:
                logging.warning("‚ö†Ô∏è –§–∞–π–ª reminders.json –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π.")
                return []
    return []

def save_reminders(reminders):
    with open(REMINDER_FILE, "w") as f:
        json.dump(reminders, f, indent=2)

# --- –ö–æ–º–∞–Ω–¥–∞ /remind ---
async def remind_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        time_str = context.args[0]
        message = " ".join(context.args[1:])
        reminders = load_reminders()
        reminders.append({
            "chat_id": update.effective_chat.id,
            "time": time_str,
            "text": message,
            "sent": False
        })
        save_reminders(reminders)
        await update.message.reply_text(f"‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time_str}: {message}")
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —É /remind: {e}")
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /remind HH:MM —Ç–µ–∫—Å—Ç")

# --- –¶–∏–∫–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å ---
async def reminder_loop(app):
    logging.info("üì° –§–æ–Ω–æ–≤–∏–π –ø—Ä–æ—Ü–µ—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –∑–∞–ø—É—â–µ–Ω–æ")
    while True:
        now = datetime.now().strftime("%H:%M")
        logging.info(f"üïí –ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å: {now}")
        reminders = load_reminders()
        updated = False

        for reminder in reminders:
            if reminder["time"] == now and not reminder["sent"]:
                try:
                    await app.bot.send_message(
                        chat_id=reminder["chat_id"],
                        text=f"‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {reminder['text']}"
                    )
                    reminder["sent"] = True
                    updated = True
                    logging.info(f"‚úÖ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {reminder['text']} ‚Üí {reminder['chat_id']}")
                except Exception as e:
                    logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

        if updated:
            save_reminders(reminders)
        await asyncio.sleep(60)

# --- –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è ---
async def main():
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("remind", remind_command))

    await app.initialize()
    await app.start()
    asyncio.create_task(reminder_loop(app))
    logging.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!")
    await app.updater.start_polling()

# --- –ó–∞–ø—É—Å–∫ –∑ Nest Asyncio ---
nest_asyncio.apply()
loop = asyncio.get_event_loop()
loop.create_task(main())
loop.run_forever()
