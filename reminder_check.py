import json
import os
import asyncio
import logging
from datetime import datetime
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from dotenv import load_dotenv
import nest_asyncio

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–≤ ---
logging.basicConfig(level=logging.INFO)
print("‚è≥ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

# --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ ---
load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
REMINDER_FILE = "reminders.json"

# --- –§—É–Ω–∫—Ü—ñ—ó –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è/–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å ---
def load_reminders():
    if os.path.exists(REMINDER_FILE):
        with open(REMINDER_FILE, "r") as f:
            return json.load(f)
    return []

def save_reminders(reminders):
    with open(REMINDER_FILE, "w") as f:
        json.dump(reminders, f, indent=2)

# --- –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /remind ---
async def remind_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        time_str = context.args[0]
        message = " ".join(context.args[1:])
        reminders = load_reminders()
        reminders.append({
            "chat_id": update.effective_chat.id,
            "time": time_str,
            "text": message,
            "sent": False
        })
        save_reminders(reminders)
        await update.message.reply_text(f"‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time_str}: {message}")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —É /remind: {e}")
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /remind 14:00 –≤–∏–ø–∏–π –ª—ñ–∫–∏")

# --- –§–æ–Ω–æ–≤–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è ---
async def reminder_loop(app):
    logging.info("üì° –§–æ–Ω–æ–≤–∏–π –ø—Ä–æ—Ü–µ—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –∑–∞–ø—É—â–µ–Ω–æ")
    while True:
        now = datetime.now().strftime("%H:%M")
        reminders = load_reminders()
        for reminder in reminders:
            if reminder["time"] == now and not reminder["sent"]:
                await app.bot.send_message(
                    chat_id=reminder["chat_id"],
                    text=f"‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {reminder['text']}"
                )
                reminder["sent"] = True
        save_reminders(reminders)
        await asyncio.sleep(60)

# --- –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É ---
async def main():
    logging.info("üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞...")
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("remind", remind_command))
    await app.initialize()
    await app.start()
    asyncio.create_task(reminder_loop(app))
    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥...")
    await app.updater.start_polling()

# --- –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ nest_asyncio ---
nest_asyncio.apply()
loop = asyncio.get_event_loop()
loop.create_task(main())
loop.run_forever()
